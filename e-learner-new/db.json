{
  "users": [
    {
      "id": "1",
      "name": "Fahim",
      "email": "fahim@example.com",
      "password": "user123",
      "role": "user"
    },
    {
      "id": "2",
      "name": "Admin",
      "email": "admin@example.com",
      "password": "admin123",
      "role": "admin"
    },
    {
      "id": "1a72",
      "name": "Ibrahim",
      "email": "i@example.com",
      "password": "1234i",
      "role": "user"
    },
    {
      "id": "45f4",
      "name": "Ripon",
      "email": "ripon@gmail.com",
      "password": "ripon",
      "role": "user"
    }
  ],
  "courses": [
    {
      "id": "1",
      "title": "React for Beginners",
      "description": "Learn the fundamentals of React.",
      "thumbnail": "https://via.placeholder.com/300x200",
      "createdBy": "admin",
      "materials": [
        {
          "section": "Introduction to React",
          "content": "<p>React is a popular open-source JavaScript library developed by Facebook for building fast, interactive, and scalable user interfaces, especially for single-page applications (SPAs).</p><p>It helps developers build UI using reusable and declarative components.</p>"
        },
        {
          "section": "Why Use React?",
          "content": "<ul><li>Reusable components reduce code duplication.</li><li>Virtual DOM improves performance.</li><li>Strong ecosystem and community support.</li><li>Easy to integrate with other libraries or frameworks.</li></ul>"
        },
        {
          "section": "JSX Basics",
          "content": "<p>JSX (JavaScript XML) is a syntax extension that allows you to write HTML-like code directly inside JavaScript. It makes code more readable and expressive.</p><pre><code>const element = <h1>Hello, React!</h1>;</code></pre>"
        },
        {
          "section": "Components",
          "content": "<p>Components are the building blocks of React applications. They can be either functional or class-based.</p><pre><code>// Functional Component\nfunction Welcome() {\n  return <h1>Hello, World!</h1>;\n}</code></pre>"
        },
        {
          "section": "Props",
          "content": "<p>Props (short for properties) are used to pass data from parent to child components.</p><pre><code>function Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}</code></pre>"
        },
        {
          "section": "State",
          "content": "<p>State is a built-in object that stores dynamic data within a component. You can manage it using the <code>useState</code> hook in functional components.</p><pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase</button>\n    </div>\n  );\n}</code></pre>"
        },
        {
          "section": "Event Handling",
          "content": "<p>Events in React are handled using camelCase syntax. Example:</p><pre><code>function Button() {\n  const handleClick = () => alert('Button clicked!');\n  return <button onClick={handleClick}>Click Me</button>;\n}</code></pre>"
        },
        {
          "section": "Conditional Rendering",
          "content": "<p>You can render UI conditionally using JavaScript expressions.</p><pre><code>function UserGreeting(props) {\n  return props.isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please sign in.</h1>;\n}</code></pre>"
        },
        {
          "section": "Lists and Keys",
          "content": "<p>React lets you render lists using <code>map()</code>. Keys help identify items uniquely.</p><pre><code>const numbers = [1, 2, 3];\nconst listItems = numbers.map(num => <li key={num}>{num}</li>);\n</code></pre>"
        },
        {
          "section": "Forms",
          "content": "<p>Forms in React use controlled components where form input values are managed by state.</p><pre><code>function Form() {\n  const [name, setName] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(`Hello ${name}`);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button type='submit'>Submit</button>\n    </form>\n  );\n}</code></pre>"
        },
        {
          "section": "useEffect Hook",
          "content": "<p>The <code>useEffect</code> hook lets you perform side effects like fetching data, subscriptions, or manually changing the DOM.</p><pre><code>import { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then(data => setData(data));\n  }, []);\n\n  return <div>{data.length} posts loaded</div>;\n}</code></pre>"
        },
        {
          "section": "React Router",
          "content": "<p>React Router allows navigation between different views in a React application.</p><pre><code>import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <nav>\n        <Link to='/'>Home</Link>\n        <Link to='/about'>About</Link>\n      </nav>\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/about' element={<About />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}</code></pre>"
        },
        {
          "section": "Context API",
          "content": "<p>The Context API allows you to share data across components without prop drilling.</p><pre><code>const ThemeContext = React.createContext();\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value='dark'>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}</code></pre>"
        },
        {
          "section": "React Performance Optimization",
          "content": "<ul><li>Use <code>React.memo</code> to avoid unnecessary re-renders.</li><li>Split code using dynamic imports.</li><li>Use keys properly in lists.</li><li>Avoid inline functions when possible.</li></ul>"
        },
        {
          "section": "Conclusion",
          "content": "<p>React is a powerful library for building modern web applications. With its component-based architecture, hooks, and ecosystem, it provides developers with everything needed to build scalable and maintainable UIs.</p>"
        }
      ]
    },
    {
      "id": "2",
      "title": "JavaScript Essentials",
      "description": "Understand JS from scratch.",
      "thumbnail": "https://via.placeholder.com/300x200",
      "createdBy": "admin",
      "materials": [
        {
          "section": "JS Basics",
          "content": "<p>JavaScript is a scripting language used to create dynamic web pages.</p>"
        },
        {
          "section": "Variables & Data Types",
          "content": "<p>JS has variables, numbers, strings, booleans, arrays, and objects.</p>"
        },
        {
          "section": "Functions",
          "content": "<p>Functions are reusable blocks of code in JavaScript.</p>"
        }
      ]
    }
  ],
  "quizzes": [
    {
      "id": "1",
      "title": "React Basics Quiz",
      "description": "A quiz on React fundamentals.",
      "courseId": "1",
      "createdBy": "admin"
    },
    {
      "id": "2",
      "title": "JavaScript Syntax Quiz",
      "description": "Check your JS syntax skills.",
      "courseId": "2",
      "createdBy": "admin"
    }
  ],
  "enrollments": [
    {
      "id": "e1",
      "userId": "1",
      "courseId": "1",
      "progress": 100
    },
    {
      "id": "e2",
      "userId": "1",
      "courseId": "2",
      "progress": 0
    },
    {
      "id": "e3",
      "userId": "1a72",
      "courseId": "1",
      "progress": 10
    },
    {
      "id": "e990",
      "userId": "45f4",
      "courseId": "1",
      "progress": 100
    },
    {
      "id": "0f7a",
      "userId": "45f4",
      "courseId": "2",
      "progress": 0
    }
  ],
  "attempts": []
}